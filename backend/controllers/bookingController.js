// backend/controllers/bookingController.js
import db from '../config/database.js';

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Invoice Number
const generateInvoiceNumber = () => {
  const date = new Date();
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const random = Math.floor(Math.random() * 10000).toString().padStart(4, '0');
  return `INV${year}${month}${random}`;
};

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏≤‡∏ó‡∏µ
const timeToMinutes = (time) => {
  const [hours, minutes] = time.split(':').map(Number);
  return hours * 60 + minutes;
};

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
const calculateServiceDuration = async (connection, services) => {
  const [serviceTypes] = await connection.query(
    'SELECT Type_serviceTime FROM Service_type WHERE Type_serviceName IN (?)',
    [services]
  );
  
  // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ Type_serviceTime ‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏≤‡∏ó‡∏µ ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏£‡∏¥‡∏á
  const totalDuration = serviceTypes.reduce((sum, service) => {
    return sum + (parseInt(service.Type_serviceTime) || 30);
  }, 0);
  
  return totalDuration || 30; // Default 30 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
};

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ã‡πâ‡∏≥
const checkBookingConflict = async (connection, branchId, bookingDate, bookingTime, duration) => {
  console.log('üîç Checking booking conflict...');
  console.log(`   Branch: ${branchId}, Date: ${bookingDate}, Time: ${bookingTime}, Duration: ${duration} min`);
  
  const checkingStart = timeToMinutes(bookingTime);
  const checkingEnd = checkingStart + duration;

  // ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
  const [existingBookings] = await connection.query(
    `SELECT booking_ID, booking_date, booking_status
     FROM booking 
     WHERE branch_ID = ? 
     AND DATE(booking_date) = DATE(?)
     AND booking_status != 'cancelled'`,
    [branchId, bookingDate]
  );

  console.log(`   Found ${existingBookings.length} existing bookings on this date`);

  for (const booking of existingBookings) {
    const bookingDateTime = new Date(booking.booking_date);
    const hours = bookingDateTime.getHours();
    const minutes = bookingDateTime.getMinutes();
    const existingTime = `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}`;
    
    // ‡∏î‡∏∂‡∏á‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
    const [serviceDetails] = await connection.query(
      `SELECT sd.service_ID, st.Type_serviceTime
       FROM service s
       JOIN service_detail sd ON s.service_ID = sd.service_ID
       JOIN Service_type st ON sd.service_type_ID = st.Type_serviceID
       WHERE s.booking_ID = ?`,
      [booking.booking_ID]
    );

    const existingDuration = serviceDetails.reduce((sum, detail) => {
      return sum + (parseInt(detail.Type_serviceTime) || 30);
    }, 0) || 30;

    const bookingStart = timeToMinutes(existingTime);
    const bookingEnd = bookingStart + existingDuration;

    console.log(`   Existing booking: ${existingTime} (${existingDuration} min) = ${bookingStart}-${bookingEnd}`);
    console.log(`   New booking: ${bookingTime} (${duration} min) = ${checkingStart}-${checkingEnd}`);

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô (Overlap Detection)
    const hasOverlap = (
      (checkingStart < bookingEnd && checkingEnd > bookingStart)
    );

    if (hasOverlap) {
      console.log('   ‚õî CONFLICT DETECTED!');
      return {
        conflict: true,
        conflictWith: existingTime,
        message: `‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ ${bookingTime} - ${String(Math.floor(checkingEnd/60)).padStart(2,'0')}:${String(checkingEnd%60).padStart(2,'0')} ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß (‡∏ó‡∏±‡∏ö‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á ${existingTime})`
      };
    }
  }

  console.log('   ‚úÖ No conflict found');
  return { conflict: false };
};

// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á (‡πÉ‡∏ä‡πâ Promise Pool)
export const createBooking = async (req, res) => {
  console.log('');
  console.log('üì• ========== CREATE BOOKING REQUEST ==========');
  console.log('Request body:', req.body);

  const {
    customer_id,
    branch_id,
    booking_date,
    booking_time,
    duration, // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏±‡∏ö duration ‡∏à‡∏≤‡∏Å frontend
    vehicle_type,
    vehicle_plate = null,
    vehicle_color = null,
    services,
    payment_method,
    total_amount
  } = req.body;

  // ‚úÖ Validation
  if (!customer_id || !branch_id || !booking_date || !booking_time || 
      !vehicle_type || !services || services.length === 0 || !payment_method) {
    console.log('‚ùå Validation Failed');
    return res.status(400).json({
      success: false,
      message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô'
    });
  }

  const promisePool = db.promise();
  let connection;
  
  try {
    connection = await promisePool.getConnection();
    await connection.beginTransaction();
    console.log('üîÑ Transaction Started');

    // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å frontend)
    const serviceDuration = duration || await calculateServiceDuration(connection, services);
    console.log(`‚è±Ô∏è Total service duration: ${serviceDuration} minutes`);

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ã‡πâ‡∏≥
    const conflictCheck = await checkBookingConflict(
      connection,
      branch_id,
      booking_date,
      booking_time,
      serviceDuration
    );

    if (conflictCheck.conflict) {
      await connection.rollback();
      console.log('‚ùå Booking conflict detected - Transaction rolled back');
      console.log('======================================');
      
      return res.status(409).json({
        success: false,
        message: conflictCheck.message,
        conflictWith: conflictCheck.conflictWith,
        error: 'BOOKING_CONFLICT'
      });
    }

    // 1Ô∏è‚É£ ‡∏´‡∏≤/‡∏™‡∏£‡πâ‡∏≤‡∏á vehicle_type
    console.log('1Ô∏è‚É£ Checking vehicle_type:', vehicle_type);
    const [vtypes] = await connection.query(
      'SELECT vtype_ID FROM vehicle_type WHERE vtype_name = ?',
      [vehicle_type]
    );

    let vtypeId;
    if (vtypes.length === 0) {
      const [vtypeResult] = await connection.query(
        'INSERT INTO vehicle_type (vtype_name) VALUES (?)',
        [vehicle_type]
      );
      vtypeId = vtypeResult.insertId;
      console.log('   ‚úÖ Created vehicle_type ID:', vtypeId);
    } else {
      vtypeId = vtypes[0].vtype_ID;
      console.log('   ‚úÖ Found vehicle_type ID:', vtypeId);
    }

    // 2Ô∏è‚É£ ‡∏™‡∏£‡πâ‡∏≤‡∏á/‡∏´‡∏≤ Vehicle
    console.log('2Ô∏è‚É£ Checking vehicle...');
    let vehicleId;
    
    if (vehicle_plate) {
      const [existingVehicles] = await connection.query(
        'SELECT vehicle_ID FROM vehicle WHERE vehicle_plate = ? AND customer_cust_ID = ?',
        [vehicle_plate, customer_id]
      );

      if (existingVehicles.length > 0) {
        vehicleId = existingVehicles[0].vehicle_ID;
        console.log('   ‚úÖ Found existing vehicle ID:', vehicleId);
      } else {
        const [vehicleResult] = await connection.query(
          'INSERT INTO vehicle (vehicle_plate, vehicle_color, customer_cust_ID, vehicle_type_vtype_ID) VALUES (?, ?, ?, ?)',
          [vehicle_plate, vehicle_color, customer_id, vtypeId]
        );
        vehicleId = vehicleResult.insertId;
        console.log('   ‚úÖ Created new vehicle ID:', vehicleId);
      }
    } else {
      const tempPlate = `TEMP-${customer_id}-${Date.now()}`;
      const [vehicleResult] = await connection.query(
        'INSERT INTO vehicle (vehicle_plate, vehicle_color, customer_cust_ID, vehicle_type_vtype_ID) VALUES (?, ?, ?, ?)',
        [tempPlate, vehicle_color || 'N/A', customer_id, vtypeId]
      );
      vehicleId = vehicleResult.insertId;
      console.log('   ‚úÖ Created temp vehicle ID:', vehicleId);
    }

    // 3Ô∏è‚É£ ‡∏™‡∏£‡πâ‡∏≤‡∏á Booking
    console.log('3Ô∏è‚É£ Creating booking...');
    const bookingDateTime = `${booking_date} ${booking_time}:00`;
    const [bookingResult] = await connection.query(
      'INSERT INTO booking (booking_date, booking_status, customer_cust_ID, branch_ID) VALUES (?, ?, ?, ?)',
      [bookingDateTime, 'pending', customer_id, branch_id]
    );
    const bookingId = bookingResult.insertId;
    console.log('   ‚úÖ Created booking ID:', bookingId);

    // 4Ô∏è‚É£ ‡∏™‡∏£‡πâ‡∏≤‡∏á Payment
    console.log('4Ô∏è‚É£ Creating payment...');
    const [paymentResult] = await connection.query(
      'INSERT INTO payment (payment_amount, payment_method, booking_ID) VALUES (?, ?, ?)',
      [total_amount, payment_method, bookingId]
    );
    const paymentId = paymentResult.insertId;
    console.log('   ‚úÖ Created payment ID:', paymentId);

    // 5Ô∏è‚É£ ‡∏™‡∏£‡πâ‡∏≤‡∏á Invoice
    console.log('5Ô∏è‚É£ Creating invoice...');
    const invoiceNumber = generateInvoiceNumber();
    const invoiceDesc = `‡∏à‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏£‡∏ñ - ${vehicle_type} | ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£: ${services.join(', ')}`;
    
    await connection.query(
      'INSERT INTO invoice (invoice_number, invoice_description, payment_ID) VALUES (?, ?, ?)',
      [invoiceNumber, invoiceDesc, paymentId]
    );
    console.log('   ‚úÖ Created invoice:', invoiceNumber);

    // 6Ô∏è‚É£ ‡∏™‡∏£‡πâ‡∏≤‡∏á Service
    console.log('6Ô∏è‚É£ Creating service...');
    const [serviceResult] = await connection.query(
      'INSERT INTO service (service_status, booking_ID, vehicle_ID) VALUES (?, ?, ?)',
      ['pending', bookingId, vehicleId]
    );
    const serviceId = serviceResult.insertId;
    console.log('   ‚úÖ Created service ID:', serviceId);

    // 7Ô∏è‚É£ ‡∏™‡∏£‡πâ‡∏≤‡∏á Service Details
    console.log('7Ô∏è‚É£ Creating service details...');
    console.log('   Services requested:', services);
    
    const [serviceTypes] = await connection.query(
      'SELECT Type_serviceID, Type_serviceName, Type_serviceBasePrice FROM Service_type WHERE Type_serviceName IN (?)',
      [services]
    );

    console.log('   Found service types:', serviceTypes.length);
    
    if (serviceTypes.length === 0) {
      throw new Error(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£: ${services.join(', ')}`);
    }

    // ‡∏´‡∏≤ employee (Cleaner = role_ID 2)
    const [employees] = await connection.query(
      'SELECT emp_ID FROM employee WHERE role_ID = 2 LIMIT 1'
    );
    const employeeId = employees.length > 0 ? employees[0].emp_ID : 1;
    console.log('   Using employee ID:', employeeId);

    for (const serviceType of serviceTypes) {
      await connection.query(
        'INSERT INTO service_detail (sdetail_quantity, sdetail_price, service_ID, service_type_ID, employee_ID) VALUES (?, ?, ?, ?, ?)',
        [1, serviceType.Type_serviceBasePrice, serviceId, serviceType.Type_serviceID, employeeId]
      );
      console.log(`   ‚úÖ Added: ${serviceType.Type_serviceName}`);
    }

    await connection.commit();
    console.log('‚úÖ Transaction Committed!');
    console.log('======================================');

    res.json({
      success: true,
      message: '‡∏à‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!',
      booking: {
        id: bookingId,
        invoice_number: invoiceNumber,
        booking_date: bookingDateTime,
        total_amount,
        duration: serviceDuration
      }
    });

  } catch (error) {
    if (connection) {
      await connection.rollback();
      console.log('üîÑ Transaction Rolled Back');
    }
    
    console.error('‚ùå Booking Error:', error);
    console.log('======================================');
    
    res.status(500).json({
      success: false,
      message: error.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î'
    });
  } finally {
    if (connection) {
      connection.release();
    }
  }
};

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Calendar)
export const getAllActiveBookings = async (req, res) => {
  try {
    const promisePool = db.promise();
    
    const [bookings] = await promisePool.query(
      `SELECT 
        b.booking_ID,
        b.booking_date,
        b.booking_status
       FROM booking b
       WHERE b.booking_status != 'cancelled'
       AND DATE(b.booking_date) >= CURDATE()
       ORDER BY b.booking_date`
    );

    // ‡πÅ‡∏õ‡∏•‡∏á booking_date ‡πÄ‡∏õ‡πá‡∏ô date + time + duration
    const bookingsWithDetails = await Promise.all(
      bookings.map(async (booking) => {
        const bookingDateTime = new Date(booking.booking_date);
        const hours = bookingDateTime.getHours();
        const minutes = bookingDateTime.getMinutes();
        const bookingTime = `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}`;
        
        const dateOnly = bookingDateTime.toISOString().split('T')[0];

        // ‡∏î‡∏∂‡∏á‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
        const [serviceDetails] = await promisePool.query(
          `SELECT sd.service_ID, st.Type_serviceTime
           FROM service s
           JOIN service_detail sd ON s.service_ID = sd.service_ID
           JOIN Service_type st ON sd.service_type_ID = st.Type_serviceID
           WHERE s.booking_ID = ?`,
          [booking.booking_ID]
        );

        const duration = serviceDetails.reduce((sum, detail) => {
          return sum + (parseInt(detail.Type_serviceTime) || 30);
        }, 0) || 30;

        return {
          booking_date: dateOnly,
          booking_time: bookingTime,
          duration: duration
        };
      })
    );

    res.json({
      success: true,
      bookings: bookingsWithDetails
    });

  } catch (error) {
    console.error('‚ùå Error fetching active bookings:', error);
    res.status(500).json({
      success: false,
      message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ'
    });
  }
};

// ‚úÖ ‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
export const getBookingHistory = async (req, res) => {
  try {
    const { customerId } = req.params;

    const sql = `
      SELECT 
        b.booking_ID,
        b.booking_date,
        b.booking_status,
        p.payment_amount,
        p.payment_method,
        i.invoice_number,
        i.invoice_description
      FROM booking b
      LEFT JOIN payment p ON b.booking_ID = p.booking_ID
      LEFT JOIN invoice i ON p.payment_ID = i.payment_ID
      WHERE b.customer_cust_ID = ?
      ORDER BY b.booking_date DESC
    `;

    db.query(sql, [customerId], (err, results) => {
      if (err) {
        console.error('‚ùå Error:', err);
        return res.status(500).json({
          success: false,
          message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î'
        });
      }

      res.json({
        success: true,
        bookings: results
      });
    });

  } catch (error) {
    console.error('‚ùå Error:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î'
    });
  }
};

// ‚úÖ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
export const cancelBooking = async (req, res) => {
  try {
    const { id } = req.params;

    const sql = 'UPDATE booking SET booking_status = ? WHERE booking_ID = ?';
    
    db.query(sql, ['cancelled', id], (err, result) => {
      if (err) {
        console.error('‚ùå Error:', err);
        return res.status(500).json({
          success: false,
          message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î'
        });
      }

      if (result.affectedRows === 0) {
        return res.status(404).json({
          success: false,
          message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á'
        });
      }

      db.query(
        'UPDATE service SET service_status = ? WHERE booking_ID = ?',
        ['cancelled', id]
      );

      res.json({
        success: true,
        message: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
      });
    });

  } catch (error) {
    console.error('‚ùå Error:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î'
    });
  }
};